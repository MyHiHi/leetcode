# -*- encoding: utf-8 -*-
'''
@File    :   最小代价爬楼梯.py
@Time    :   2020/03/07 13:03:27
@Author  :   Zhang tao 
@Version :   1.0
@Desc    :   最小代价爬楼梯.py
'''

'''
题目描述
你需要爬上一个N层的楼梯，在爬楼梯过程中， 每阶楼梯需花费非负代价，第i阶楼梯花费代价表示为cost[i]， 一旦你付出了代价，你可以在该阶基础上往上爬一阶或两阶。 
你可以从第 0 阶或者 第 1 阶开始，请找到到达顶层的最小的代价是多少。 
N和cost[i]皆为整数，且N∈[2,1000]，cost[i]∈ [0, 999]。 

输入描述:
输入为一串半角逗号分割的整数，对应cost数组，例如

10,15,20
输出描述:
输出一个整数，表示花费的最小代价
示例1 
输入
1,100,1,1,1,100,1,1,100,1
输出
6

'''
'''
台阶问题，动态规划问题
dp[i]为到达第i层最小的代价
dp[i]=min(dp[i-1],dp[i-2])+cost[i]
'''
# 最后加0：
# 输入：1,999 --->不加0:结果：999(c错)--->加0：结果：1(对)
# 可能刚刚好到达顶层，可能跨过这一层直接上顶
cost=list(map(int,input().strip().split(',')))+[0];
le=len(cost);
dp=[cost[0],cost[1]]
for i in cost[2:]:
    dp+=[min(dp[-1],dp[-2])+i];
print(dp[-1])
   
    