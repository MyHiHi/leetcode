# -*- encoding: utf-8 -*-
'''
@File    :   矩阵重叠.py
@Time    :   2020/02/07 10:49:27
@Author  :   Zhang tao 
@Version :   1.0
@Desc    :   None
'''

'''
题目描述
平面内有n个矩形, 第i个矩形的左下角坐标为(x1[i], y1[i]), 右上角坐标为(x2[i], y2[i])。

如果两个或者多个矩形有公共区域则认为它们是相互重叠的(不考虑边界和角落)。

请你计算出平面内重叠矩形数量最多的地方,有多少个矩形相互重叠。

输入描述:
输入包括五行。
第一行包括一个整数n(2 <= n <= 50), 表示矩形的个数。
第二行包括n个整数x1[i](-10^9 <= x1[i] <= 10^9),表示左下角的横坐标。
第三行包括n个整数y1[i](-10^9 <= y1[i] <= 10^9),表示左下角的纵坐标。
第四行包括n个整数x2[i](-10^9 <= x2[i] <= 10^9),表示右上角的横坐标。
第五行包括n个整数y2[i](-10^9 <= y2[i] <= 10^9),表示右上角的纵坐标。
输出描述:
输出一个正整数, 表示最多的地方有多少个矩形相互重叠,如果矩形都不互相重叠,输出1。
示例1
输入
2
0 90
0 90
100 200
100 200
输出
2
'''

import sys;
c=sys.stdin.readlines();
n=int(c[0])
x1=list(map(int,c[1].split()));
y1=list(map(int,c[2].split()));
x2=list(map(int,c[3].split()));
y2=list(map(int,c[4].split()));
res=0;
'''
想要知道某个重合区域在多少个矩形内，
可以转化为计算这个重合区域的左下角在多少个矩形内。
外面两层循环遍历了所有重合区域可能的左下角，
最里层循环计算这个左下角在多少个矩形内。
'''
for x in x1:
    for y in y1:
        co=0;
        for i in range(n):
            if x>=x1[i] and x<x2[i] and y>=y1[i] and y<y2[i]:
                co+=1;
        res=max(co,res);
        
print(res)
                
         
